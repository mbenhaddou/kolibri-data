{
  "LinearRegression": {
        "class": "sklearn.linear_model.LinearRegression",
        "parameters": {
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "normalize": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "copy_X": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "positive": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          }
        },
        "name": "Ordinary least squares Linear Regression"
      },
  "Ridge": {
        "class": "sklearn.linear_model.Ridge",
        "parameters": {
          "alpha": {
            "value": 1.0
          },
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "normalize": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "copy_X": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "max_iter": {
            "value": null,
            "type": "integer",
            "values": [
              1000,
              15000
            ]
          },
          "solver": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto", "svd", "cholesky", "lsqr", "sparse_cg", "sag", "saga", "lbfgs"
            ]
          },
          "positive": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          }
        },
        "name": "Linear least squares with l2 regularization"
      },

  "KNeighborsRegressor": {
        "class": "sklearn.neighbors.KNeighborsRegressor",
        "parameters": {
          "n_neighbors": {
            "value": 5,
            "type": "int",
            "values": [3, 10]
          },
          "algorithm": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto", "ball_tree", "kd_tree", "brute"
            ]
          },
          "leaf_size": {
            "value": 30,
            "type": "int",
            "values": [
              10,
              50
            ]
          },
          "p": {
            "value": 2,
            "type": "int",
            "values": [
              1,
              2
            ]
          }
        },
        "name": "Regression based on k-nearest neighbors"
      },
  "Lasso": {
        "class": "sklearn.linear_model.Lasso",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "Lars(": {
        "class": "sklearn.linear_model.Lars(",
        "parameters": {
        },
        "name": "Least Angle Regression model a.k.a. LAR."
      },
  "ElasticNet": {
        "class": "sklearn.linear_model.ElasticNet",
        "parameters": {
        },
        "name": "Linear regression with combined L1 and L2 priors as regularizer"
      },
  "SGDRegressor": {
        "class": "sklearn.linear_model.SGDRegressor",
        "parameters": {
          "alpha": {
            "value": 0.0001
          },
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "l1_ratio": {
            "value": 0.15,
            "type": "float",
            "values": [
              0.01,
              0.99
            ]
          },
          "epsilon": {
            "value": 0.1,
            "type": "boolean",
            "values": [
              0.05,
              0.5
            ]
          },
          "max_iter": {
            "value": null,
            "type": "integer",
            "values": [
              1000,
              15000
            ]
          },
          "learning_rate": {
            "value": "invscaling",
            "type": "string",
            "values": [
              "invscaling", "constant", "optimal", "adaptive"
            ]
          },
          "eta0": {
            "value": 0.01,
            "type": "float",
            "values": [
              0.001,
              0.5
            ]
          }
        },
        "name": "Linear model fitted by minimizing a regularized empirical loss with SGD"
      },
  "LassoLars": {
        "class": "sklearn.linear_model.LassoLars",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "OrthogonalMatchingPursuit": {
        "class": "sklearn.linear_model.OrthogonalMatchingPursuit",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "HuberRegressor": {
        "class": "sklearn.linear_model.HuberRegressor",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "QuantileRegressor": {
        "class": "sklearn.linear_model.QuantileRegressor",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "RANSACRegressor": {
        "class": "sklearn.linear_model.RANSACRegressor",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "TheilSenRegressor": {
        "class": "sklearn.linear_model.TheilSenRegressor",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "PassiveAggressiveRegressor": {
        "class": "sklearn.linear_model.PassiveAggressiveRegressor",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "BayesianRidge": {
        "class": "sklearn.linear_model.BayesianRidge",
        "parameters": {
        },
        "name": "Bayesian ridge regression"
      },
  "ARDRegression": {
        "class": "sklearn.linear_model.ARDRegression",
        "parameters": {
        },
        "name": "Bayesian ARD regression"
      },
  "KernelRidge": {
        "class": "sklearn.kernel_ridge.KernelRidge",
        "parameters": {
        },
        "name": "Kernel ridge regression"
      },
  "SVR": {
        "class": "sklearn.svm.SVR",
        "parameters": {
        },
        "name": "Linear Model trained with L1 prior as regularizer (aka the Lasso)"
      },
  "DecisionTreeRegressor": {
        "class": "sklearn.tree.DecisionTreeRegressor",
        "parameters": {
        },
        "name": "A decision tree regressor."
      },
  "RandomForestRegressor": {
        "class": "sklearn.ensemble.RandomForestRegressor",
        "parameters": {
        },
        "name": "A decision tree regressor."
      },
  "ExtraTreeRegressor": {
        "class": "sklearn.tree.ExtraTreeRegressor",
        "parameters": {
        },
        "name": "An extremely randomized tree regressor.\n\n"
      },
  "AdaBoostRegressor": {
        "class": "sklearn.ensemble.AdaBoostRegressor",
        "parameters": {
        },
        "name": "An AdaBoost regressor"
      },
  "GradientBoostingRegressor": {
        "class": "sklearn.ensemble.GradientBoostingRegressor",
        "parameters": {
        },
        "name": "Gradient Boosting for regression"
      },
  "MLPRegressor": {
        "class": "sklearn.neural_network.MLPRegressor",
        "parameters": {
        },
        "name": "Multi-layer Perceptron regressor."
      },
  "XGBRegressor": {
        "class": "xgboost.XGBRegressor",
        "parameters": {
        },
        "name": "An Xgboost regressor."
      },
  "CatBoostRegressor": {
    "class": "catboost.CatBoostRegressor",
    "parameters": {
      "loss_function": {
        "value": "RMSEWithUncertainty",
        "type": "string",
        "values": [
          "RMSEWithUncertainty",
          "RMSE",
          "R2"
        ]
      }
    },
      "name": "An Boosted trees regressor."
    }
}