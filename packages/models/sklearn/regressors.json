{
  "LinearRegression": {
        "class": "sklearn.linear_model.LinearRegression",
        "parameters": {
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "normalize": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "copy_X": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "positive": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          }
        },
        "description": "Ordinary least squares Linear Regression",
        "name": "linear_regression",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "LazyRegression":  {
        "class": "kolibri.backend.sklearn.extensions.lazy_learner.LazyRegression",
        "parameters": {
          "n_neighbors": {
            "value": 5,
            "type": "int",
            "values": [
              3,
              11
            ]
          },
          "algorithm": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto",
              "ball_tree",
              "kd_tree",
              "brute"
            ]
          },
          "distance": {
            "value": "heom",
            "type": "string",
            "values": [
              "heom",
              "hvdm"
            ]
          },
          "leaf_size": {
            "value": 30,
            "type": "int",
            "values": [
              20,
              50
            ]
          },
          "weights": {
            "value": "uniform",
            "type": "string",
            "values": [
             "uniform",
             "distance"
            ]
          },
          "nb_features_to_keep": {
            "value": 8,
            "type": "int",
            "values": [
              1,
              20
            ]
          },
          "nb_buckets":{
            "value": 100,
            "type": "int",
            "values": [
              30,
              200
            ]
          },
          "num_features_dist_importance":{
                      "value": 10,
                      "type": "float",
                      "values": [
                        0,
                        20
                      ]
                    },
          "weight_by_distance": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "posterior_sampling": {
        "value": true,
        "type": "boolean",
        "values": [
          true,
          false
        ]
      },
          "learning_rate": {
        "value": 0.03,
        "type": "float",
        "values": [
          0.001,
          1
        ]
      },
          "objective": {
            "value": "RMSE",
            "type": "categorical",
            "values": [
              "RMSE",
              "MAE",
              "MAPE"
            ]
          },
          "rsm": {
            "value": 1,
            "type": "float",
            "values": [
              0,
              1
            ]
          },
          "depth": {
            "value": 6,
            "type": "integer",
            "values": [
              1,
              12
            ]
          },
          "boosting_type": {
            "value": "Ordered",
            "type": "categorical",
            "values": [
              "Ordered",
              "Plain"
            ]
          },
          "bootstrap_type": {
            "value": "Bayesian",
            "type": "categorical",
            "values": [
              "Bayesian",
               "Bernoulli",
              "MVS"
            ]
          },
          "bagging_temperature": {
            "value": 1,
            "type": "float",
            "values": [
              1, 10
            ]
          },
          "l2_leaf_reg":{
        "value": 3.0,
        "type": "float",
        "values": [
          1.0,
          10.0
        ]
      },
          "iterations": {
            "value": 1000,
            "type": "integer",
            "values": [
              200,
              2000
            ]
          },
          "verbose": {
            "value": false
          },
          "linear_model": {
            "value": false
          },
          "augment_samples_ratio": {
            "value": 0.0
          },
          "inddependent_var_name": {
            "value": null
          }


        },
        "description": "Lazy Learning Regression",
        "name": "lazy_regression",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "LazyLookupRegression":  {
        "class": "kolibri.backend.sklearn.extensions.lookup_learner.LazyLookupRegression",
        "parameters": {
          "n_neighbors": {
            "value": 2,
            "type": "int"
          },
          "algorithm": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto",
              "ball_tree",
              "kd_tree",
              "brute"
            ]
          },
          "distance": {
            "value": "heom",
            "type": "string",
            "values": [
              "heom",
              "hvdm"
            ]
          },
          "leaf_size": {
            "value": 30,
            "type": "int",
            "values": [
              20,
              50
            ]
          },
          "num_features_dist_importance":{
                      "value": 10,
                      "type": "float",
                      "values": [
                        0,
                        20
                      ]
                    },
          "posterior_sampling": {
        "value": true,
        "type": "boolean",
        "values": [
          true,
          false
        ]
      },
          "learning_rate": {
        "value": 0.03,
        "type": "float",
        "values": [
          0.001,
          1
        ]
      },
          "objective": {
            "value": "RMSE",
            "type": "categorical",
            "values": [
              "RMSE",
              "MAE",
              "MAPE"
            ]
          },
          "rsm": {
            "value": 1,
            "type": "float",
            "values": [
              0,
              1
            ]
          },
          "depth": {
            "value": 6,
            "type": "integer",
            "values": [
              1,
              12
            ]
          },
          "boosting_type": {
            "value": "Ordered",
            "type": "categorical",
            "values": [
              "Ordered",
              "Plain"
            ]
          },
          "bootstrap_type": {
            "value": "Bayesian",
            "type": "categorical",
            "values": [
              "Bayesian",
               "Bernoulli",
              "MVS"
            ]
          },
          "bagging_temperature": {
            "value": 1,
            "type": "float",
            "values": [
              1, 10
            ]
          },
          "l2_leaf_reg":{
        "value": 3.0,
        "type": "float",
        "values": [
          1.0,
          10.0
        ]
      },
          "iterations": {
            "value": 1000,
            "type": "integer",
            "values": [
              200,
              2000
            ]
          },
          "verbose": {
            "value": false
          },
          "linear_model": {
            "value": false
          }

        },
        "description": "Lazy Lookup Learning Regression, builds a lookup table for models and fill it lazyly",
        "name": "lazy_lookup_regression",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "Ridge": {
        "class": "sklearn.linear_model.Ridge",
        "parameters": {
          "alpha": {
            "value": 1.0
          },
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "normalize": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "copy_X": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "max_iter": {
            "value": null,
            "type": "integer",
            "values": [
              1000,
              15000
            ]
          },
          "solver": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto", "svd", "cholesky", "lsqr", "sparse_cg", "sag", "saga", "lbfgs"
            ]
          },
          "positive": {
            "value": false,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          }
        },
        "description": "Linear least squares with l2 regularization",
            "name": "ridge_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "KNeighborsRegressor": {
        "class": "sklearn.neighbors.KNeighborsRegressor",
        "parameters": {
          "n_neighbors": {
            "value": 5,
            "type": "int",
            "values": [3, 10]
          },
          "algorithm": {
            "value": "auto",
            "type": "string",
            "values": [
              "auto", "ball_tree", "kd_tree", "brute"
            ]
          },
          "leaf_size": {
            "value": 30,
            "type": "int",
            "values": [
              10,
              50
            ]
          },
          "p": {
            "value": 2,
            "type": "int",
            "values": [
              1,
              2
            ]
          }
        },
        "description": "Regression based on k-nearest neighbors",
        "name": "knn_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "Lasso": {
        "class": "sklearn.linear_model.Lasso",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
        "name": "lasso_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "Lars": {
        "class": "sklearn.linear_model.Lars",
        "parameters": {
        },
        "description": "Least Angle Regression model a.k.a. LAR.",
        "name": "lars_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "ElasticNet": {
        "class": "sklearn.linear_model.ElasticNet",
        "parameters": {
        },
        "description": "Linear regression with combined L1 and L2 priors as regularizer",
       "name": "elasticnet_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "SGDRegressor": {
        "class": "sklearn.linear_model.SGDRegressor",
        "parameters": {
          "alpha": {
            "value": 0.0001
          },
          "fit_intercept": {
            "value": true,
            "type": "boolean",
            "values": [
              true,
              false
            ]
          },
          "l1_ratio": {
            "value": 0.15,
            "type": "float",
            "values": [
              0.01,
              0.99
            ]
          },
          "epsilon": {
            "value": 0.1,
            "type": "boolean",
            "values": [
              0.05,
              0.5
            ]
          },
          "max_iter": {
            "value": 1000,
            "type": "integer",
            "values": [
              1000,
              15000
            ]
          },
          "learning_rate": {
            "value": "invscaling",
            "type": "string",
            "values": [
              "invscaling", "constant", "optimal", "adaptive"
            ]
          },
          "eta0": {
            "value": 0.01,
            "type": "float",
            "values": [
              0.001,
              0.5
            ]
          }
        },
        "description": "Linear model fitted by minimizing a regularized empirical loss with SGD",
            "name": "sqg_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "LassoLars": {
        "class": "sklearn.linear_model.LassoLars",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "lasso_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "OrthogonalMatchingPursuit": {
        "class": "sklearn.linear_model.OrthogonalMatchingPursuit",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "omp_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "HuberRegressor": {
        "class": "sklearn.linear_model.HuberRegressor",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "hubber_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "QuantileRegressor": {
        "class": "sklearn.linear_model.QuantileRegressor",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "quantile_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "slow",
    "library": "sklearn"
      },
  "RANSACRegressor": {
        "class": "sklearn.linear_model.RANSACRegressor",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "ransac_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "TheilSenRegressor": {
        "class": "sklearn.linear_model.TheilSenRegressor",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "thiel_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "PassiveAggressiveRegressor": {
        "class": "sklearn.linear_model.PassiveAggressiveRegressor",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "passive_aggressive_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "BayesianRidge": {
        "class": "sklearn.linear_model.BayesianRidge",
        "parameters": {
        },
        "description": "Bayesian ridge regression",
            "name": "bayesian_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "ARDRegression": {
        "class": "sklearn.linear_model.ARDRegression",
        "parameters": {
        },
        "description": "Bayesian ARD regression",
            "name": "ard_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "KernelRidge": {
        "class": "sklearn.kernel_ridge.KernelRidge",
        "parameters": {
        },
        "description": "Kernel ridge regression",
            "name": "kernel_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "slow",
    "library": "sklearn"
      },
  "SVR": {
        "class": "sklearn.svm.SVR",
        "parameters": {
        },
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso)",
            "name": "svr_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "DecisionTreeRegressor": {
        "class": "sklearn.tree.DecisionTreeRegressor",
        "parameters": {
        },
        "description": "A decision tree regressor.",
            "name": "dt_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "RandomForestRegressor": {
        "class": "sklearn.ensemble.RandomForestRegressor",
        "parameters": {
        },
        "description": "A decision tree regressor.",
            "name": "rf_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "ExtraTreeRegressor": {
        "class": "sklearn.tree.ExtraTreeRegressor",
        "parameters": {
        },
        "description": "An extremely randomized tree regressor.\n\n",
            "name": "et_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "AdaBoostRegressor": {
        "class": "sklearn.ensemble.AdaBoostRegressor",
        "parameters": {
        },
        "description": "An AdaBoost regressor",
            "name": "adaboost_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "GradientBoostingRegressor": {
        "class": "sklearn.ensemble.GradientBoostingRegressor",
        "parameters": {
        },
        "description": "Gradient Boosting for regression",
            "name": "grd_boost_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "MLPRegressor": {
        "class": "sklearn.neural_network.MLPRegressor",
        "parameters": {
        },
        "description": "Multi-layer Perceptron regressor.",
            "name": "mlp_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
      },
  "XGBRegressor": {
        "class": "xgboost.XGBRegressor",
        "parameters": {
        },
        "description": "An Xgboost regressor.",
            "name": "xgboost_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "xgboost"
      },
  "CatBoostRegressor": {
    "class": "catboost.CatBoostRegressor",
    "parameters": {
      "posterior_sampling": {
        "value": true,
        "type": "boolean",
        "values": [
          true,
          false
        ]
      },
      "objective": {
        "value": "RMSE",
        "type": "categorical",
        "values": [
          "RMSE",
          "MAE",
          "MAPE"
        ]
      },
      "rsm": {
        "value": 1,
        "type": "float",
        "values": [
          0,
          1
        ]
      },
      "depth": {
        "value": 6,
        "type": "integer",
        "values": [
          1,
          12
        ]
      },
      "boosting_type": {
        "value": "Ordered",
        "type": "categorical",
        "values": [
          "Ordered",
          "Plain"
        ]
      },
      "bootstrap_type": {
        "value": "Bayesian",
        "type": "categorical",
        "values": [
          "Bayesian",
           "Bernoulli",
          "MVS"
        ]
      },
      "bagging_temperature": {
        "value": 1,
        "type": "float",
        "values": [
          1, 10
        ]
      },
      "learning_rate": {
        "value": 0.03,
        "type": "float",
        "values": [
          0.001,
          1
        ]
      },
      "l2_leaf_reg":{
        "value": 3.0,
        "type": "float",
        "values": [
          1.0,
          10.0
        ]
      },
      "iterations": {
            "value": 1000,
            "type": "integer",
            "values": [
              200,
              2000
            ]
          },
      "verbose": {
        "value": false
      }
    },
    "description": "An Boosted trees regressor.",
    "name": "catboost_regressor",
        "family": "linear",
         "matrix": "sparse",
        "performance": "fast",
    "library": "catboost"
    },
  "HistGradientBoostingRegressor": {
    "class": "sklearn.ensemble.HistGradientBoostingRegressor",
    "parameters": {
    },
    "description": "Histogram-based Gradient Boosting Regression Tree.",
    "name": "hist_gradient_regressor",
        "family": "ensemble",
         "matrix": "sparse",
        "performance": "fast",
    "library": "sklearn"
    }
}
